import java.util.Set;
import Utility.SetRepUtility;
import AST.*;

/**
 * The Sanitize Variables Analysis.
 * For each program point, which variables MUST have been sanitized.
 */
aspect SanitizedVariablesAnalysis
{
    /** The kill function for sanitized variables. */
    syn Set<String> ElementaryBlock.killSV(Set<String> current);

    eq ConstS.killSV(Set<String> current) = SetRepUtility.emptySet();
    eq VarS.killSV(Set<String> current) = SetRepUtility.emptySet();
/*
    eq ProcS.killSV(Set<String> current)
    {

        Set<Set<String>> killedSets = new Set<Set<String>>();

        for(Label final : finals)
        {
            killedSets.add(final.itsBlock().SVexit());
        }
        return SetRepUtility.emptySet();
    }
    */

    eq AssignS.killSV(Set<String> current) = SetRepUtility.singleton(getVar());
    eq CallS.killSV(Set<String> current) = SetRepUtility.emptySet();
    eq ReadS.killSV(Set<String> current) = SetRepUtility.singleton(getVar());
    eq SanitizeS.killSV(Set<String> current) = SetRepUtility.emptySet();
    eq PrintS.killSV(Set<String> current) = SetRepUtility.emptySet();
    eq LabeledExpr.killSV(Set<String> current) = SetRepUtility.emptySet();

    /** The gen function for sanitized variables. */
    syn Set<String> ElementaryBlock.genSV();

    eq ConstS.genSV() = SetRepUtility.emptySet();
    eq VarS.genSV() = SetRepUtility.emptySet();
    eq AssignS.genSV() = SetRepUtility.emptySet();
    eq CallS.genSV() = SetRepUtility.emptySet();
    eq ReadS.genSV() = SetRepUtility.emptySet();
    eq SanitizeS.genSV() = SetRepUtility.singleton(getVar());
    eq PrintS.genSV() = SetRepUtility.emptySet();
    eq LabeledExpr.genSV() = SetRepUtility.emptySet();

    /** Compute the entry information for the SV analysis. */
    syn Set<String> ElementaryBlock.SVentry() circular [VarStar()];

    eq ElementaryBlock.SVentry()
    {
        Set<String> ret;
        if (getLabel().equals(progInitLabel()))
        {
            ret = SetRepUtility.emptySet();
        }
        else
        {
            Set<Set<String>> inputs = SetRepUtility.map(
                new SetRepUtility.Fun<Label, Set<String>>()
                {
                    public Set<String> run(Label l)
                    {
                        ElementaryBlock b = l.itsBlock();
                        return b.SVexit();
                    }
                }, inFlows());
            ret = SetRepUtility.intersect(inputs);
        }
        return ret;
    }

    /** Compute the exit information for the SV analysis. */
    syn Set<String> ElementaryBlock.SVexit() circular [VarStar()];
    eq ElementaryBlock.SVexit()
    {
        Set<String> ret = SetRepUtility.emptySet();
        ret.addAll(this.SVentry());
        ret.removeAll(this.killSV(ret));
        ret.addAll(this.genSV());
        return ret;
    }
/*
    eq ProcS.SVentry()
    {
        Set<String> ret = SetRepUtility.emptySet();
        ret.addAll(this.SVentry());
        ret.removeAll(this.killSV(ret));
        ret.addAll(this.genSV());
        return ret;
    }

    eq ProcS.SVexit()
    {
        Set<String> ret = SetRepUtility.emptySet();
        ret.addAll(this.SVentry());
        ret.removeAll(this.killSV(ret));
        ret.addAll(this.genSV());
        return ret;
    }
    */
}
