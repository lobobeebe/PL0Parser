import java.util.Set;
import Utility.SetRepUtility;
import AST.*;

/**
 * The Sanitize Variables Analysis.
 * For each program point, which variables must have been sanitized.
 * Note: This analysis is not transitive for variable assignments
 */
aspect SanitizedVariablesAnalysis
{
    /** The kill function for sanitized variables. */
    syn Set<String> ElementaryBlock.killSV(Set<String> current);

    eq ConstS.killSV(Set<String> current) = SetRepUtility.emptySet();
    eq VarS.killSV(Set<String> current) = SetRepUtility.emptySet();
    eq AssignS.killSV(Set<String> current) = SetRepUtility.singleton(getVar());
    eq CallS.killSV(Set<String> current) = findProcKillSummarySV();
    eq ReadS.killSV(Set<String> current) = SetRepUtility.singleton(getVar());
    eq SanitizeS.killSV(Set<String> current) = SetRepUtility.emptySet();
    eq PrintS.killSV(Set<String> current) = SetRepUtility.emptySet();
    eq LabeledExpr.killSV(Set<String> current) = SetRepUtility.emptySet();

    /** The gen function for sanitized variables. */
    syn Set<String> ElementaryBlock.genSV();

    eq ConstS.genSV() = SetRepUtility.emptySet();
    eq VarS.genSV() = SetRepUtility.emptySet();
    eq AssignS.genSV() = SetRepUtility.emptySet();
    eq CallS.genSV() = findProcGenSummarySV();
    eq ReadS.genSV() = SetRepUtility.emptySet();
    eq SanitizeS.genSV() = SetRepUtility.singleton(getVar());
    eq PrintS.genSV() = SetRepUtility.emptySet();
    eq LabeledExpr.genSV() = SetRepUtility.emptySet();

    /** Compute the entry information for the SV analysis. */
    syn Set<String> ElementaryBlock.SVentry(Set<String> bottom) circular [VarStar()];

    eq ElementaryBlock.SVentry(Set<String> bottom)
    {
        Set<String> ret;
        if (inFlows().size() == 0)
        {
            ret = bottom;
        }
        else
        {
            Set<Set<String>> inputs = SetRepUtility.map(
                new SetRepUtility.Fun<Label, Set<String>>()
                {
                    public Set<String> run(Label l)
                    {
                        ElementaryBlock b = l.itsBlock();
                        return b.SVexit(bottom);
                    }
                }, inFlows());
            ret = SetRepUtility.intersect(inputs);
        }
        return ret;
    }

    syn Set<String> ElementaryBlock.SVentry() = SVentry(SetRepUtility.emptySet());

    /** Compute the exit information for the SV analysis. */
    syn Set<String> ElementaryBlock.SVexit(Set<String> bottom) circular [VarStar()];

    eq ElementaryBlock.SVexit(Set<String> bottom)
    {
        Set<String> ret = SetRepUtility.emptySet();
        ret.addAll(this.SVentry(bottom));
        ret.removeAll(this.killSV(ret));
        ret.addAll(this.genSV());
        return ret;
    }

    syn Set<String> ElementaryBlock.SVexit() = SVexit(SetRepUtility.emptySet());

    //=========================================================================**
    // CallS Find Procedure Summaries
    //=========================================================================**

    syn Set<String> CallS.findProcGenSummarySV();
    eq CallS.findProcGenSummarySV()
    {
        for(ProcS proc : ProcStar())
        {
            if (proc.getName().equals(getProcName()))
            {
                return proc.genSummarySV();
            }
        }

        return SetRepUtility.emptySet();
    }

    syn Set<String> CallS.findProcKillSummarySV();
    eq CallS.findProcKillSummarySV()
    {
        for(ProcS proc : ProcStar())
        {
            if (proc.getName().equals(getProcName()))
            {
                return proc.killSummarySV();
            }
        }

        return SetRepUtility.emptySet();
    }


    //=========================================================================**
    // Procedure Summaries
    //=========================================================================**

    syn Set<String> ProcS.genSummarySV();
    eq ProcS.genSummarySV()
    {
        Set<Set<String>> finalsAnalyses = SetRepUtility.map(
            new SetRepUtility.Fun<Label, Set<String>>()
            {
                public Set<String> run(Label l)
                {
                    ElementaryBlock b = l.itsBlock();
                    return b.SVexit(SetRepUtility.emptySet());
                }
            }, finals());

        return SetRepUtility.intersect(finalsAnalyses);
    }

    syn Set<String> ProcS.killSummarySV();
    eq ProcS.killSummarySV()
    {
        Set<Set<String>> finalsAnalyses = SetRepUtility.map(
            new SetRepUtility.Fun<Label, Set<String>>()
            {
                public Set<String> run(Label l)
                {
                    ElementaryBlock b = l.itsBlock();
                    Set<String> exitInfo = VarStar();
                    // Assume VarStar at entry to Procedure in order to determine which variables are killed.
                    exitInfo.removeAll(b.SVexit(VarStar()));
                    return exitInfo;
                }
            }, finals());

        return SetRepUtility.intersect(finalsAnalyses);
    }
}
