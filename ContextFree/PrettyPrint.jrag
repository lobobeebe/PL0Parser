import utility.PPUtility;

aspect PrettyPrint {

    inh int S.nestingLevel();
    eq Program.getS().nestingLevel() = 0;
    eq CompoundS.getSList(int index).nestingLevel() = nestingLevel()+1;
    eq IfS.getS1().nestingLevel() = nestingLevel();
    eq IfS.getS2().nestingLevel() = nestingLevel();
    eq WhileS.getS().nestingLevel() = nestingLevel();
    
        syn String Program.prettyPrint();
        syn String S.prettyPrint();
        syn String Expr.prettyPrint();
        syn String Op.prettyPrint();
        syn String Label.prettyPrint();
        
        eq Expr.prettyPrint() = unparse(); 
        eq Op.prettyPrint() = unparse();
        eq Label.prettyPrint() = unparse();

        // every AST is responsible for printing its own indentation.
        eq Program.prettyPrint() = getS().prettyPrint();
        eq S.prettyPrint() = PPUtility.spacesForIndent(nestingLevel()) + unparse();
        eq CompoundS.prettyPrint() { 
                StringBuffer s = new StringBuffer();
                String indent = PPUtility.spacesForIndent(nestingLevel());
                s.append(indent);
                s.append("{\n");
                int len = getNumSList();
                for (int i = 0; i < len; i++) {
                        s.append(getSList(i).prettyPrint());
                        if (i < len-1) { s.append(";\n"); }     
                }
                s.append(PPUtility.spacesForIndent(nestingLevel()));
                s.append('\n'); s.append(indent); s.append("}");
                return s.toString();
        }

        eq AssignS.prettyPrint() {
            String indent = PPUtility.spacesForIndent(nestingLevel()); 
                return indent + "[" + getVar() + " := " + getExpr().prettyPrint() + "]"
                        + "^" + getLabelAST().prettyPrint();
        }
        eq IfS.prettyPrint() {
            String indent = PPUtility.spacesForIndent(nestingLevel()); 
            return indent + "if " + getLabeledExpr().prettyPrint() 
                   + " then\n" + getS1().prettyPrint() 
                   + " else\n" + getS2().prettyPrint();
        }
        eq WhileS.prettyPrint() { return PPUtility.spacesForIndent(nestingLevel())
                                 + "while "  + getLabeledExpr().prettyPrint() 
                                 + " do\n" + getS().prettyPrint(); }
        eq LabeledExpr.prettyPrint() { 
                return "[" + getExpr().prettyPrint() + "]^" + getLabelAST().prettyPrint();
        } 
}
