import java.util.Set;
import Utility.SetRepUtility;
import AST.*;

/**
 * The Sanitize Must Analysis.
 * For each program point, which variables MUST have been sanitized.
 */
aspect SanitizeMustAnalysis
{
    /** The kill function for sanitized variables. */
    syn Set<String> ElementaryBlock.killSM(Set<String> current);

    eq Decl.killSM(Set<String> current) = SetRepUtility.emptySet();
    eq AssignS.killSM(Set<String> current) = SetRepUtility.singleton(getVar());
    eq CallS.killSM(Set<String> current) = SetRepUtility.emptySet();
    eq LabeledExpr.killSM(Set<String> current) = SetRepUtility.emptySet();

    /** The gen function for sanitized variables. */
    syn Set<String> ElementaryBlock.genSM();

    eq Decl.genSM() = SetRepUtility.emptySet();
    eq AssignS.genSM() = SetRepUtility.emptySet();
    eq CallS.genSM() = SetRepUtility.emptySet();
    eq LabeledExpr.genSM() = SetRepUtility.emptySet();

    /** Compute the entry information for the SM analysis. */
    syn Set<String> ElementaryBlock.SMentry() circular [VarStar()]; 

    eq ElementaryBlock.SMentry()
    {
        Set<String> ret;
        if (getLabelAST().equals(progInitLabel()))
        {
            ret = SetRepUtility.emptySet();
        }
        else
        {

            Set<Set<String>> inputs = SetRepUtility.map(
                new SetRepUtility.Fun<Label, Set<String>>()
                {
                    public Set<String> run(Label l)
                    {
                        ElementaryBlock b = l.itsBlock();
                        return b.SMexit();
                    }
                }, inFlows());
            ret = SetRepUtility.intersect(inputs);
        }
        return ret;
    }

    /** Compute the exit information for the SM analysis. */
    syn Set<String> ElementaryBlock.SMexit() circular [VarStar()]; 
    eq ElementaryBlock.SMexit()
    {
        Set<String> ret = SetRepUtility.emptySet();
        ret.addAll(this.SMentry());
        ret.removeAll(this.killSM(ret));
        ret.addAll(this.genSM());
        return ret;
    }
}
