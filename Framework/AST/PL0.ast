// Program
Program ::= ProgramBlock;

// Statement
abstract S;

// ProgramBlock
ProgramBlock ::= Const:ConstS* Var:VarS* Proc:ProcS* S:UsageS;

// Declarations
abstract DeclS:S ::= LabeledRef;
ConstS:DeclS ::= <Num>;
VarS:DeclS;
ProcS:DeclS ::= Block:ProgramBlock;

// Operations
abstract Op ::= <Contents>;
Op_r:Op;
Op_a:Op;

// Expressions
abstract Expr;
abstract AExpr:Expr;
abstract BExpr:Expr;

VarRefExpr:AExpr ::= <Contents>;
NumLitExpr:AExpr ::= <Contents>;
ABinaryExpr:AExpr ::= Left:AExpr Op:Op_a Right:AExpr;

OddExpr:BExpr ::= AExpr;
BBinaryExpr:BExpr ::= Left:AExpr Op:Op_r Right:AExpr;

LabeledRef ::= Label <Var>;
LabeledExpr ::= Label Expr:BExpr;

// Usage Statements
abstract UsageS:S;
CallS:UsageS ::= LabeledRef;
BeginEndS:UsageS ::= S:UsageS*;
AssignS:UsageS ::= LabeledRef AExpr;
IfS:UsageS ::= LabeledExpr S:UsageS;
WhileS:UsageS ::= LabeledExpr S:UsageS;

// Labels
abstract Label;
NumLabel:Label ::= <Num>;
