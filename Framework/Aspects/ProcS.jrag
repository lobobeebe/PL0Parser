import java.util.Set;
import Utility.Pair;
import Utility.SetRepUtility;
import AST.*;

aspect ProcS
{
    ProcS implements ElementaryBlock;

    //=========================================================================**
    // Vars()
    //=========================================================================**

    syn Set<String> ProcS.Vars();
    eq ProcS.Vars() = getBlock().Vars();

    //=========================================================================**
    // progInitLabel()
    //=========================================================================**    

    eq ProcS.getBlock().progInitLabel() = progInitLabel();

    //=========================================================================**
    // inFlows()
    //=========================================================================**

    //=========================================================================**
    // init()
    //=========================================================================**

    eq ProcS.init() = getLabel();

    //=========================================================================**
    // blocks()
    //=========================================================================**

    eq ProcS.blocks() = SetRepUtility.singleton(getLabel());

    //=========================================================================**
    // next()
    //=========================================================================**

    eq ProcS.getBlock().next() = next();

    //=========================================================================**
    // finals()
    //=========================================================================**

    eq ProcS.finals() = SetRepUtility.singleton(getLabel());

    //=========================================================================**
    // unparse()
    //=========================================================================**

    eq ProcS.unparse()
    {
        return "[procedure " + getName() + "]^" + getLabel() + ";";
    }

    //=========================================================================**
    // unparseBlock()
    //=========================================================================**

    syn String ProcS.unparseBlock();
    eq ProcS.unparseBlock()
    {
        return " " + getBlock().unparse() + ";";
    }
}
