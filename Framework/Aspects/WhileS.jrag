import java.util.Set;
import Utility.SetRepUtility;
import AST.*;

//=========================================================================**
// WhileS aspect
//=========================================================================**

aspect WhileS
{
    //=========================================================================**
    // inFlows()
    //=========================================================================**

    eq WhileS.getLabeledExpr().inFlows()
    {
        Set<Label> ins = inFlows();
        ins.addAll(getS().finals());
        return ins;
    }

    eq WhileS.getS().inFlows() = SetRepUtility.singleton(getLabeledExpr().getLabel());

    //=========================================================================**
    // init()
    //=========================================================================**

    eq WhileS.init() = getLabeledExpr().getLabel();

    //=========================================================================**
    // blocks()
    //=========================================================================**

    eq WhileS.blocks()
    {
        Set<ElementaryBlock> ret = getS().blocks();
        ret.add(getLabeledExpr());
        return ret;
    }

    //=========================================================================**
    // next()
    //=========================================================================**

    eq WhileS.getS().next() = this;

    //=========================================================================**
    // finals()
    //=========================================================================**

    eq WhileS.finals() = SetRepUtility.singleton(getLabeledExpr().getLabel());

    //=========================================================================**
    // outFlows()
    //=========================================================================**

    eq WhileS.getLabeledExpr().outFlows()
    {
        Set<Label> ret = SetRepUtility.singleton(getS().init());
        if(next() != null)
        {
            ret.add(next().init());
        }

        return ret;
    }
    eq WhileS.getS().outFlows()
    {
        return SetRepUtility.singleton(getLabeledExpr().getLabel());
    }

    //=========================================================================**
    // unparse()
    //=========================================================================**

    eq WhileS.unparse()
    {
        return "while " + getLabeledExpr().unparse() + " do " + getS().unparse();
    }
}
