aspect Unparse
{
    /**
     * "unparse()"
     * Unparses the AST node back to code format.
     */
    syn String Program.unparse();
    syn String Block.unparse();
    syn String constDecl.unparse();
    syn String VarDecl.unparse();
    syn String ProcDecl.unparse();
    syn String Op.unparse();
    syn String S.unparse();
    syn String AExpr.unparse();
    syn String BExpr.unparse();
    syn String Label.unparse();

    /**
     * "toString()"
     * Converts the AST node to a string.
     */
    syn String Program.toString() = unparse();
    syn String Block.toString() = unparse();
    syn String Procedure.toString() = unparse();
    syn String Op.toString() = getContents();
    syn String S.toString() = unparse();
    syn String Expr.toString() = unparse();
    syn String Label.toString() = unparse();


    /**
     * Define "unparse()"
     */
    eq Program.unparse() { return getBlock().unparse() + "."; }
    eq Block.unparse()
    {
        StringBuffer buffer = new StringBuffer();

        // Append Constants
        int length = getNumConstant();
        if(length > 0)
        {
            buffer.append("const ");
        }

        for(int i =0; i < length; i++)
        {
            buffer.append(getConstant(i).unparse());

            if(i == length - 1)
            {
                buffer.append(";\n");
            }
            else
            {
                buffer.append(", ");
            }
        }

        // Append Vars
        length = getNumVar();
        if(length > 0)
        {
            buffer.append("var ");
        }

        for(int i =0; i < length; i++)
        {
            buffer.append(getVar(i).unparse());

            if(i == length - 1)
            {
                buffer.append(";\n");
            }
            else
            {
                buffer.append(", ");
            }
        }

        // Append Procedure
        length = getNumProc();

        for(int i =0; i < length; i++)
        {
            buffer.append(getProc(i).unparse() + " ");
        }

        buffer.append(getS().unparse());
        return buffer.toString();
    }

    // Declarations
    eq ConstDecl.unparse() { return "[" + getVar() + " = " + getNum() + "]^" + getLabelAST().unparse(); }
    eq VarDecl.unparse() { return "[" + getVar() + "]^" + getLabelAST().unparse(); }

    // Procedure
    eq Procedure.unparse() { return "[procedure " + getVar() + "]^" + getLabelAST().unparse() + "; " + getBlock().unparse() + ";"; }

    // Expressions
    eq VarRefExpr.unparse() { return getContents(); }
    eq NumLitExpr.unparse() { return getContents(); }
    eq ABinaryExpr.unparse() { return "(" + getLeft().unparse() + " " + getOp().unparse() + " " + getRight().unparse() + ")"; }
    eq OddExpr.unparse() { return "odd " + getExpr().unparse(); }
    eq RelExpr.unparse() { return getLeft().unparse() + " " + getOp().unparse() + " " + getRight().unparse(); }

    // Statements
    eq CallS.unparse() { return "[call " + getVar() + "]^" + getLabelAST().unparse(); }
    eq BeginEndS.unparse()
    {
        StringBuffer buffer = new StringBuffer();
        buffer.append("begin\n");
        int len = getNumStatement();
        for (int i = 0; i < len; i++)
        {
            buffer.append(getStatement(i).unparse());
            if (i < len-1)
            {
                buffer.append(";\n");
            }
        }
        buffer.append("\nend");
        return buffer.toString();
    }
    eq AssignS.unparse() { return "[" + getVar() + " := " + getExpr().unparse() + "]^" + getLabelAST().unparse() ; }

    eq IfS.unparse() { return "if " + getLabeledExpr().unparse() + " then " + getS().unparse(); }

    eq WhileS.unparse() { return "while "  + getLabeledExpr().unparse() + " do " + getS().unparse(); }

    eq LabeledExpr.unparse() { return "[" + getExpr().unparse() + "]^" + getLabelAST().unparse(); }

    eq Op.unparse() = getContents();

    eq NumLabel.unparse() = getNum().toString();
    }
