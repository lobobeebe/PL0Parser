import java.util.*;
import Utility.SetRepUtility;
import Utility.FlowGraph;
import AST.*;

//=========================================================================**
// ProgramBlock Aspect
//=========================================================================**

aspect ProgramBlock
{
    //=========================================================================**
    // inFlows()
    //=========================================================================**

    inh Set<Label> ProgramBlock.inFlows();

    eq ProgramBlock.getConst(int index).inFlows()
    {
        if(index == 0)
        {
            return inFlows();
        }
        else
        {
            return getConst(index + 1).finals();
        }
    }

    eq ProgramBlock.getVar(int index).inFlows()
    {
        if(index == 0)
        {
            if(getNumConst() == 0)
            {
                return inFlows();
            }
            else
            {
                return getConst(getNumConst() - 1).finals();
            }
        }
        else
        {
            return getVar(index - 1).finals();
        }
    }

    eq ProgramBlock.getProc(int index).inFlows()
    {
        if(index == 0)
        {
            if(getNumVar() == 0)
            {
                if(getNumConst() == 0)
                {
                    return inFlows();
                }
                else
                {
                    return getConst(getNumConst() - 1).finals();
                }
            }
            else
            {
                return getVar(getNumVar() - 1).finals();
            }
        }
        else
        {
            return getProc(index - 1).finals();
        }
    }

    eq ProgramBlock.getS().inFlows() = inFlows();

    //=========================================================================**
    // init(): The initial label of a Program Block
    //=========================================================================**

    syn Label ProgramBlock.init();
    eq ProgramBlock.init()
    {
        if (getNumConst() > 0)
        {
            return getConst(0).init();
        }
        else if(getNumVar() > 0)
        {
            return getVar(0).init();
        }
        else if(getNumProc() > 0)
        {
            return getProc(0).init();
        }
        else
        {
            return getS().init();
        }
    }

    //=========================================================================**
    // blocks(): Set of elementary blocks in a program block
    //=========================================================================**

    syn Set<ElementaryBlock> ProgramBlock.blocks()
    {
        Set<ElementaryBlock> ret = SetRepUtility.emptySet();
        for (ConstS constant : getConstList())
        {
            ret.add(constant.getLabeledRef());
        }
        for (VarS var : getVarList())
        {
            ret.add(var.getLabeledRef());
        }
        for (ProcS proc : getProcList())
        {
            ret.add(proc.getLabeledRef());
        }
        ret.addAll(getS().blocks());
        return ret;
    }

    //=========================================================================**
    // next()
    //=========================================================================**

    inh S ProgramBlock.next();

    eq ProgramBlock.getConst(int index).next()
    {
        if(index == getNumConst() - 1)
        {
            if(getNumVar() == 0)
            {
                if(getNumProc() == 0)
                {
                    return getS();
                }
                else
                {
                    return getProc(0);
                }
            }
            else
            {
                return getVar(0);
            }
        }
        else
        {
            return getConst(index + 1);
        }
    }

    eq ProgramBlock.getVar(int index).next()
    {
        if(index == getNumVar() - 1)
        {
            if(getNumProc() == 0)
            {
                return getS();
            }
            else
            {
                return getProc(0);
            }
        }
        else
        {
            return getVar(index + 1);
        }
    }

    eq ProgramBlock.getProc(int index).next()
    {
        if(index == getNumProc() - 1)
        {
            return getS();
        }
        else
        {
            return getProc(index + 1);
        }
    }

    eq ProgramBlock.getS().next() = next();

    //=========================================================================**
    // finals()
    //=========================================================================**

    syn Set<Label> ProgramBlock.finals();
    eq ProgramBlock.finals() = getS().finals();

    //=========================================================================**
    // outFlows()
    //=========================================================================**

    inh Set<Label> ProgramBlock.outFlows();

    eq ProgramBlock.getConst(int index).outFlows() = SetRepUtility.singleton(next().init());
    eq ProgramBlock.getVar(int index).outFlows() = SetRepUtility.singleton(next().init());
    eq ProgramBlock.getProc(int index).outFlows() = SetRepUtility.singleton(next().init());
    eq ProgramBlock.getS().outFlows() = outFlows();

    //=========================================================================**
    // Vars()
    //=========================================================================**

    syn Set<String> ProgramBlock.Vars();
    eq ProgramBlock.Vars()
    {
        Set<String> ret = SetRepUtility.emptySet();
        for (int i = 0; i < getNumVar(); i++)
        {
            ret.add(getVar(i).getLabeledRef().getVar());
        }

        for (int i = 0; i < getNumProc(); i++)
        {
            ret.addAll(getProc(i).Vars());
        }
        return ret;
    }

    //=========================================================================**
    // ProcStar()
    //=========================================================================**

    syn List<ProcS> ProgramBlock.ProcStar();
    eq ProgramBlock.ProcStar() = getProcList();
    eq ProgramBlock.getConst(int index).ProcStar() = ProcStar();
    eq ProgramBlock.getVar(int index).ProcStar() = ProcStar();
    eq ProgramBlock.getProc(int index).ProcStar() = ProcStar();
    eq ProgramBlock.getS().ProcStar() = ProcStar();

    //=========================================================================**
    // VarStar(): The set of variables in the program.
    //=========================================================================**

    syn Set<String> ProgramBlock.VarStar();
    eq ProgramBlock.VarStar() = Vars();
    eq ProgramBlock.getConst(int index).VarStar() = VarStar();
    eq ProgramBlock.getVar(int index).VarStar() = VarStar();
    eq ProgramBlock.getProc(int index).VarStar() = VarStar();
    eq ProgramBlock.getS().VarStar() = Vars();

    //=========================================================================**
    // toString()
    //=========================================================================**

    syn String ProgramBlock.toString() = unparse();

    //=========================================================================**
    // unparse()
    //=========================================================================**

    syn String ProgramBlock.unparse();
    eq ProgramBlock.unparse()
    {
        StringBuffer buffer = new StringBuffer();

        // Append Constants
        int length = getNumConst();
        if(length > 0)
        {
            buffer.append("const ");
        }

        for(int i = 0; i < length; i++)
        {
            buffer.append(getConst(i).unparse());

            if(i == length - 1)
            {
                buffer.append(";\n");
            }
            else
            {
                buffer.append(", ");
            }
        }

        // Append Vars
        length = getNumVar();
        if(length > 0)
        {
            buffer.append("var ");
        }

        for(int i = 0; i < length; i++)
        {
            buffer.append(getVar(i).unparse());

            if(i == length - 1)
            {
                buffer.append(";\n");
            }
            else
            {
                buffer.append(", ");
            }
        }

                /*
        // Append Procedure
        length = getNumProc();

        for(int i =0; i < length; i++)
        {
            buffer.append(getProc(i).unparse() + " ");
        }

        buffer.append(getS().unparse());
        */

        return buffer.toString();
    }
}
