import java.util.*;
import Utility.SetRepUtility;
import AST.*;

//=========================================================================**
// Statement Aspect: Holds all attributes of S's(?)
//=========================================================================**

aspect Statement
{
    //=========================================================================**
    // equals()
    //=========================================================================**

    public boolean S.equals(Object o)
    {
        if(o == null || !(o instanceof S))
        {
            return false;
        }
        S b = (S) o;

        return toString().equals(b.toString());
    }

    //=========================================================================**
    // hashCode()
    //=========================================================================**

    public int S.hashCode()
    {
        return toString().hashCode();
    }

    //=========================================================================**
    // progInitLabel()
    //=========================================================================**

    inh Label S.progInitLabel();

    //=========================================================================**
    // inFlows()
    //=========================================================================**

    inh Set<Label> S.inFlows();

    //=========================================================================**
    // init()
    //=========================================================================**

    syn Label S.init();

    //=========================================================================**
    // blocks()
    //=========================================================================**

    syn Set<ElementaryBlock> S.blocks();

    //=========================================================================**
    // next(): Get next statement for outflows
    //=========================================================================**

    inh S S.next();

    //=========================================================================**
    // finals()
    //=========================================================================**

    syn Set<Label> S.finals();

    //=========================================================================**
    // outFlows()
    //=========================================================================**

    inh Set<Label> S.outFlows();

    //=========================================================================**
    // ProcStar()
    //=========================================================================**

    inh List<ProcS> S.ProcStar();

    //=========================================================================**
    // VarStar(): The set of variables in the program.
    //=========================================================================**

    inh Set<String> S.VarStar();
}
