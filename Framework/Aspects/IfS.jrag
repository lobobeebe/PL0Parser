import java.util.Set;
import Utility.SetRepUtility;
import AST.*;

//=========================================================================**
// IfS aspect
//=========================================================================**

aspect IfS
{
    //=========================================================================**
    // progInitLabel()
    //=========================================================================**    
    
    eq IfS.getS().progInitLabel() = progInitLabel();

    //=========================================================================**
    // inFlows()
    //=========================================================================**

    eq IfS.getS().inFlows() = SetRepUtility.singleton(getLabeledExpr().getLabel());
    eq IfS.getLabeledExpr().inFlows() = inFlows();

    //=========================================================================**
    // init()
    //=========================================================================**

    eq IfS.init() = getLabeledExpr().getLabel();

    //=========================================================================**
    // blocks()
    //=========================================================================**

    eq IfS.blocks()
    {
        Set<ElementaryBlock> ret = getS().blocks();
        ret.add(getLabeledExpr());
        return ret;
    }

    //=========================================================================**
    // next()
    //=========================================================================**

    eq IfS.getS().next() = next();

    //=========================================================================**
    // finals()
    //=========================================================================**

    eq IfS.finals() = getS().finals();

    //=========================================================================**
    // outFlows()
    //=========================================================================**

    eq IfS.getS().outFlows()
    {
        if(next() == null)
        {
            return SetRepUtility.emptySet();
        }
        else
        {
            return SetRepUtility.singleton(next().init());
        }
    }

    eq IfS.getLabeledExpr().outFlows()
    {
        return SetRepUtility.singleton(getS().init());
    }

    //=========================================================================**
    // unparse()
    //=========================================================================**

    eq IfS.unparse()
    {
        return "if " + getLabeledExpr().unparse() + " then " + getS().unparse();
    }
}
