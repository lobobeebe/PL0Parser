import java.util.*;
import Utility.SetRepUtility;
import Utility.FlowGraph;

/** Control Flow Graph attributes, see Section 2.1 of "Principles of Progarm Analysis"
 * by Nielsen, Nielsen, and Hankin (Springer-Verlag, 1999 and 2005).
 */
aspect CFG
{

    /** The initial label of an AST node. */
    syn Label S.init();
    eq AssignS.init() = getLabelAST();
    eq IfS.init() = getLabeledExpr().getLabelAST();
    eq WhileS.init() = getLabeledExpr().getLabelAST();
    eq BeginEndS.init() = getStatement(0).init();
    eq CallS.init() = getLabelAST();

    syn Label Decl.init();
    eq ConstDecl.init() =  getLabelAST();
    eq VarDecl.init() =  getLabelAST();
    eq Procedure.init() = getLabelAST();



    /** The set of final labels of an AST node. */
    syn Set<Label> Program.finals();
    eq Program.finals() = getS().finals();

    syn Set<Label> S.finals();
    eq AssignS.finals() = SetRepUtility.singleton(getLabelAST());
    eq IfS.finals() = S.finals();
    eq WhileS.finals() = getLabeledExpr().getLabelAST();
    eq BeginEndS.finals() = getStatement(getNumStatement()-1).finals();
    ///////////////
    //eq CallS.finals() = SetRepUtility.singleton(getLabelAST()); //TODO

    ///////////


    /** Control flow node. */
    public interface Block{
        Set<Label> inFlows();
        Set<Label> outFlows();
        Label getLabelAST();
    }

    ConstDecl implements Block;
    AssignS implements Block;
    LabeledExpr implements Block;

    /** Set of blocks in a statement */
    syn Set<Block> S.blocks();
    eq AssignS.blocks() = SetRepUtility.singleton(this);
    eq IfS.blocks(){
    	Set<Block> ret = getS().blocks();
    	ret.add(getLabeledExpr());
    	return ret;
    }
    eq whileS.blocks(){
    	Set<Block> ret = getS().blocks();
    	ret.add(getLabeledExpr());
    	return ret;
    }
    eq BeginEndS.blocks(){
    	Set<Block> ret = SetRepUtility.emptySet();
    	for(int i = 0; i < getNumStatement(); i++){
    		ret.addAll(getStatement(i).blocks());
    	}
    	return ret;
    }
    eq CallS.blocks(){
        Set<Block> ret = SetRepUtility.emptySet();
        for(int i = 0; i < getNumProcedure(); i++)
        {
            if(getProcedure(i).getVar().equals(getVar())
            {
                ret.addAll(getProcedure(i).getConstantList());
                ret.addAll(getProcedure(i).getS().blocks());
            }
        }
    }
}
