import java.util.Set;
import Utility.SetRepUtility;
import AST.*;

/**
 * The Tainted Variables Analysis.
 * For each program point, which variables may have been assigned from user input.
 * Note: This analysis is not transitive for variable assignments
 */
aspect TaintedVariablesAnalysis
{
    /** The kill function for tainted variables. */
    syn Set<String> ElementaryBlock.killTV(Set<String> current);

    eq ConstS.killTV(Set<String> current) = SetRepUtility.emptySet();
    eq VarS.killTV(Set<String> current) = SetRepUtility.emptySet();

    eq AssignS.killTV(Set<String> current) = SetRepUtility.singleton(getVar());
    eq CallS.killTV(Set<String> current) = findProcKillSummaryTV();
    eq ReadS.killTV(Set<String> current) = SetRepUtility.emptySet();
    eq SanitizeS.killTV(Set<String> current) = SetRepUtility.singleton(getVar());
    eq PrintS.killTV(Set<String> current) = SetRepUtility.emptySet();
    eq LabeledExpr.killTV(Set<String> current) = SetRepUtility.emptySet();

    /** The gen function for tainted variables. */
    syn Set<String> ElementaryBlock.genTV();

    eq ConstS.genTV() = SetRepUtility.emptySet();
    eq VarS.genTV() = SetRepUtility.emptySet();
    eq AssignS.genTV() = SetRepUtility.emptySet();
    eq CallS.genTV() = findProcGenSummaryTV();
    eq ReadS.genTV() = SetRepUtility.singleton(getVar());
    eq SanitizeS.genTV() = SetRepUtility.emptySet();
    eq PrintS.genTV() = SetRepUtility.emptySet();
    eq LabeledExpr.genTV() = SetRepUtility.emptySet();

    /** Compute the entry information for the TV analysis. */
    syn Set<String> ElementaryBlock.TVentry(Set<String> bottom) circular [SetRepUtility.emptySet()];

    eq ElementaryBlock.TVentry(Set<String> bottom)
    {
        Set<String> ret;
        if (inFlows().size() == 0)
        {
            ret = bottom;
        }
        else
        {
            Set<Set<String>> inputs = SetRepUtility.map(
                new SetRepUtility.Fun<Label, Set<String>>()
                {
                    public Set<String> run(Label l)
                    {
                        ElementaryBlock b = l.itsBlock();
                        return b.TVexit(bottom);
                    }
                }, inFlows());
            ret = SetRepUtility.union(inputs);
        }
        return ret;
    }

    syn Set<String> ElementaryBlock.TVentry() = TVentry(SetRepUtility.emptySet());

    /** Compute the exit information for the TV analysis. */
    syn Set<String> ElementaryBlock.TVexit(Set<String> bottom) circular [SetRepUtility.emptySet()];
    eq ElementaryBlock.TVexit(Set<String> bottom)
    {
        Set<String> ret = SetRepUtility.emptySet();
        ret.addAll(this.TVentry(bottom));
        ret.removeAll(this.killTV(ret));
        ret.addAll(this.genTV());
        return ret;
    }

    syn Set<String> ElementaryBlock.TVexit() = TVexit(SetRepUtility.emptySet());

    //=========================================================================**
    // CallS Find Procedure Summaries
    //=========================================================================**

    syn Set<String> CallS.findProcGenSummaryTV();
    eq CallS.findProcGenSummaryTV()
    {
        for(ProcS proc : ProcStar())
        {
            if (proc.getName().equals(getProcName()))
            {
                return proc.genSummaryTV();
            }
        }

        return SetRepUtility.emptySet();
    }

    syn Set<String> CallS.findProcKillSummaryTV();
    eq CallS.findProcKillSummaryTV()
    {
        for(ProcS proc : ProcStar())
        {
            if (proc.getName().equals(getProcName()))
            {
                return proc.killSummaryTV();
            }
        }

        return SetRepUtility.emptySet();
    }


    //=========================================================================**
    // Procedure Summaries
    //=========================================================================**

    syn Set<String> ProcS.genSummaryTV();
    eq ProcS.genSummaryTV()
    {
        Set<Set<String>> finalsAnalyses = SetRepUtility.map(
            new SetRepUtility.Fun<Label, Set<String>>()
            {
                public Set<String> run(Label l)
                {
                    ElementaryBlock b = l.itsBlock();
                    return b.TVexit(SetRepUtility.emptySet());
                }
            }, finals());

        return SetRepUtility.union(finalsAnalyses);
    }

    syn Set<String> ProcS.killSummaryTV();
    eq ProcS.killSummaryTV()
    {
        Set<Set<String>> finalsAnalyses = SetRepUtility.map(
            new SetRepUtility.Fun<Label, Set<String>>()
            {
                public Set<String> run(Label l)
                {
                    ElementaryBlock b = l.itsBlock();
                    Set<String> exitInfo = VarStar();
                    // Assume VarStar at entry to Procedure in order to determine which variables are killed.
                    exitInfo.removeAll(b.TVexit(VarStar()));
                    return exitInfo;
                }
            }, finals());

        return SetRepUtility.union(finalsAnalyses);
    }

}
