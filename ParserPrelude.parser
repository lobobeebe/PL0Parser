%header {:
 package AST;
 import java.io.*;
 import utility.LabelUtility;
 :};
  
%embed {:
  /** Syntax error exceptions. */
  public class ParseException extends RuntimeException {
  	public ParseException(String msg) { super(msg); }
  }
  
  /** Error handling adapter for using Beaver from JastAdd. */
  class Events extends Parser.Events {
    public void syntaxError(Symbol token) {
      StringBuffer s = new StringBuffer();
      s.append("line: " + token.getLine(token.getStart()) + " char: " + token.getColumn(token.getStart()) + "\n");
      s.append("  *** Syntactic error: unexpected token " + Terminals.NAMES[token.getId()]);
      throw new ParseException(s.toString());
    }
    public void scannerError(Scanner.Exception e) {
      StringBuffer s = new StringBuffer();
      s.append("line: " + e.line + " char: " + e.column + "\n");
      s.append("  *** Lexical error: " + e.getMessage());
      throw new ParseException(s.toString());
    }
  }

  { LabelUtility.reset(); 
    report = new Events(); // Use error handler in parser
  }
  
  public Program parse(java.io.InputStream is, String fileName) throws java.io.IOException, beaver.Parser.Exception {
     Program prog;
     // errors = new ArrayList();
     try {
       WHILEScanner scanner = new WHILEScanner(new BufferedReader(new InputStreamReader(is)));
       prog = (Program)parse(scanner);
     } catch(ParseException e) {
       // build empty program for failed error recovery
       prog = new Program();
     } catch(Error e) {
       prog = new Program();
       // errors.add(new Problem(null, e.getMessage(), 0, 0, Problem.Severity.ERROR, Problem.Kind.LEXICAL));
     }
     // for(java.util.Iterator iter = errors.iterator(); iter.hasNext(); ) {
     //   Problem p = (Problem)iter.next();
     //   p.setFileName(fileName);
     //   prog.addParseError(p);
     // }
     return prog;
   }
   // protected java.util.Collection errors = new ArrayList();
  
:};

/* JastAdd doesn't seem to process the following precedence decls, so it's commented out!
// precedence (highest first)
%right NOT;               
%left OPMUL;              
%left OPPLUS, OPMINUS;            
%nonassoc OPRELATIONAL;  
%left AND;               
%left OR;                
*/
