Program ::= S;

//block
Block ::= [] [] 

//declarations
Abstract Decl;
ConstDecl: Decl ::= <Ident> <Num>;
VarDecl: Decl ::= <Ident>;

//procedure/call
Procedure ::= <Ident> Block;

//Operations
abstract Op ::= <Contents>;
Op_r : Op;
Op_a : Op;

//expressions
abstract Expr;
IdentRefExpr: Expr ::= <Contents>;
NumLitExpr: Expr ::= <Contents>;
ABinaryExpr: Expr ::= Left:Expr Op:Op_a Right:Expr;
OddExpr: expr ::= Expr;
RelExpr: Expr ::= Left:Expr Op:Op_r Right:Expr;
ConditionExpr: Expr ::= Expr;

// statements
abstract S; 
CompoundS: S ::= SList:S* ;
AssignS:S ::= <Ident> Expr;
IfS:S ::= RelExpr S1:S S2:S ;
WhileS:S ::= RelExpr S;

//I/O and sanitize statements
PrintS:S ::= <Ident>;
ReadS:S ::= <Ident>;
Sanitize:S ::= <Ident>;