Program ::= S;

abstract Op ::= <Contents>;
Op_b : Op;
Op_r : Op;
Op_a : Op;

abstract Expr;

VarRefExpr: Expr ::= <Contents>;
NumLitExpr: Expr ::= <Contents>;
ABinaryExpr: Expr ::= Left:Expr Op:Op_a Right:Expr;

BoolLitExpr:Expr ::= <Contents>;
NotExpr: Expr ::= Expr;
LogicExpr: Expr ::= Left:Expr Op:Op_b Right:Expr;
RelExpr: Expr ::= Left:Expr Op:Op_r Right:Expr;
LabeledExpr: Expr ::= LabelAST:Label Expr; 

// statements
abstract S; 
CompoundS: S ::= SList:S* ;
AssignS:S ::= LabelAST:Label <Var> Expr;
SkipS:S ::= LabelAST:Label;
IfS:S ::= LabeledExpr S1:S S2:S ;
WhileS:S ::= LabeledExpr S;

abstract Label;
NumLabel:Label ::= <Num>;
