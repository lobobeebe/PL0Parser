Program ::= Block;

// Block
Block ::= [ConstDecl*] [VarDecl*] S

// Declarations
Abstract Decl;
ConstDecl: Decl ::= <Ident> <Num>;
VarDecl: Decl ::= <Ident>;

// Procedure
Procedure ::= <Ident> Block;

// Operations
abstract Op ::= <Contents>;
Op_r : Op;
Op_a : Op;

// Expressions
abstract Expr;
VarRefExpr: Expr ::= <Contents>;
NumLitExpr: Expr ::= <Contents>;
ABinaryExpr: Expr ::= Left:Expr Op:Op_a Right:Expr;
OddExpr: Expr ::= Expr;
RelExpr: Expr ::= Left:Expr Op:Op_r Right:Expr;

// Statements
abstract S; 
CallS: S ::= <Ident>
BeginEndS: S ::= SList:S*;
AssignS:S ::= <Ident> Expr;
IfS:S ::= RelExpr S1:S;
WhileS:S ::= RelExpr S;