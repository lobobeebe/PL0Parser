import java.util.Set;
import Utility.SetRepUtility;
import AST.*;

/**
 * The Tainted Expressions Analysis.
 * For each program point, which expressions may.
 * Note: This analysis is not transitive for variable assignments
 */
aspect SanitizedVariablesAnalysis
{
    /** The kill function for sanitized variables. */
    syn Set<ABinaryExpr> ElementaryBlock.killTE(Set<ABinaryExpr> current);

    eq ConstS.killTE(Set<ABinaryExpr> current) = SetRepUtility.emptySet();
    eq VarS.killTE(Set<ABinaryExpr> current) = SetRepUtility.emptySet();
    eq AssignS.killTE(Set<ABinaryExpr> current) = SetRepUtility.singleton(getVar());
    eq CallS.killTE(Set<ABinaryExpr> current) = findProcKillSummaryTE();
    eq ReadS.killTE(Set<ABinaryExpr> current) = SetRepUtility.singleton(getVar());
    eq SanitizeS.killTE(Set<ABinaryExpr> current) = SetRepUtility.emptySet();
    eq PrintS.killTE(Set<ABinaryExpr> current) = SetRepUtility.emptySet();
    eq LabeledExpr.killTE(Set<ABinaryExpr> current) = SetRepUtility.emptySet();

    /** The gen function for sanitized variables. */
    syn Set<ABinaryExpr> ElementaryBlock.genTE();

    eq ConstS.genTE() = SetRepUtility.emptySet();
    eq VarS.genTE() = SetRepUtility.emptySet();
    eq AssignS.genTE() = SetRepUtility.emptySet();
    eq CallS.genTE() = findProcGenSummaryTE();
    eq ReadS.genTE() = SetRepUtility.emptySet();
    eq SanitizeS.genTE() = SetRepUtility.singleton(getVar());
    eq PrintS.genTE() = SetRepUtility.emptySet();
    eq LabeledExpr.genTE() = SetRepUtility.emptySet();

    /** Compute the entry information for the TE analysis. */
    syn Set<ABinaryExpr> ElementaryBlock.TEentry(Set<ABinaryExpr> bottom) circular [VarStar()];

    eq ElementaryBlock.TEentry(Set<ABinaryExpr> bottom)
    {
        Set<ABinaryExpr> ret;
        if (inFlows().size() == 0)
        {
            ret = bottom;
        }
        else
        {
            Set<Set<ABinaryExpr>> inputs = SetRepUtility.map(
                new SetRepUtility.Fun<Label, Set<ABinaryExpr>>()
                {
                    public Set<ABinaryExpr> run(Label l)
                    {
                        ElementaryBlock b = l.itsBlock();
                        return b.TEexit(bottom);
                    }
                }, inFlows());
            ret = SetRepUtility.intersect(inputs);
        }
        return ret;
    }

    syn Set<ABinaryExpr> ElementaryBlock.TEentry() = TEentry(SetRepUtility.emptySet());

    /** Compute the exit information for the TE analysis. */
    syn Set<ABinaryExpr> ElementaryBlock.TEexit(Set<ABinaryExpr> bottom) circular [VarStar()];

    eq ElementaryBlock.TEexit(Set<ABinaryExpr> bottom)
    {
        Set<ABinaryExpr> ret = SetRepUtility.emptySet();
        ret.addAll(this.TEentry(bottom));
        ret.removeAll(this.killTE(ret));
        ret.addAll(this.genTE());
        return ret;
    }

    syn Set<ABinaryExpr> ElementaryBlock.TEexit() = TEexit(SetRepUtility.emptySet());

    //=========================================================================**
    // CallS Find Procedure Summaries
    //=========================================================================**

    syn Set<ABinaryExpr> CallS.findProcGenSummaryTE();
    eq CallS.findProcGenSummaryTE()
    {
        for(ProcS proc : ProcStar())
        {
            if (proc.getName().equals(getProcName()))
            {
                return proc.genSummaryTE();
            }
        }

        return SetRepUtility.emptySet();
    }

    syn Set<ABinaryExpr> CallS.findProcKillSummaryTE();
    eq CallS.findProcKillSummaryTE()
    {
        for(ProcS proc : ProcStar())
        {
            if (proc.getName().equals(getProcName()))
            {
                return proc.killSummaryTE();
            }
        }

        return SetRepUtility.emptySet();
    }


    //=========================================================================**
    // Procedure Summaries
    //=========================================================================**

    syn Set<ABinaryExpr> ProcS.genSummaryTE();
    eq ProcS.genSummaryTE()
    {
        Set<Set<ABinaryExpr>> finalsAnalyses = SetRepUtility.map(
            new SetRepUtility.Fun<Label, Set<ABinaryExpr>>()
            {
                public Set<ABinaryExpr> run(Label l)
                {
                    ElementaryBlock b = l.itsBlock();
                    return b.TEexit(SetRepUtility.emptySet());
                }
            }, finals());

        return SetRepUtility.intersect(finalsAnalyses);
    }

    syn Set<ABinaryExpr> ProcS.killSummaryTE();
    eq ProcS.killSummaryTE()
    {
        Set<Set<ABinaryExpr>> finalsAnalyses = SetRepUtility.map(
            new SetRepUtility.Fun<Label, Set<ABinaryExpr>>()
            {
                public Set<ABinaryExpr> run(Label l)
                {
                    ElementaryBlock b = l.itsBlock();
                    Set<ABinaryExpr> exitInfo = VarStar();
                    // Assume VarStar at entry to Procedure in order to determine which variables are killed.
                    exitInfo.removeAll(b.TEexit(VarStar()));
                    return exitInfo;
                }
            }, finals());

        return SetRepUtility.intersect(finalsAnalyses);
    }
}
